Index: maven-nativedependencies-plugin/src/test/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojoTest.java
===================================================================
--- maven-nativedependencies-plugin/src/test/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojoTest.java	(revision 156)
+++ maven-nativedependencies-plugin/src/test/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojoTest.java	(working copy)
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -113,4 +114,40 @@
 		mojo.execute();
 	}
 
+	@Test
+	public void executeWithPlatformsSpecifiedNativeDependenciesCallsTheUnpacker() throws MojoExecutionException, MojoFailureException, IOException
+	{
+		mojo.setPlatforms(Arrays.asList("windows", "linux"));
+		final Set<Artifact> artifacts = new HashSet<Artifact>();
+			
+		artifacts.add(artifactFactory.createArtifact("groupid1","artifactid1","1.0"));
+		Artifact nativeArtifact = artifactFactory.createArtifact("groupid2","artifactid2","2.0","compile","jar","natives-windows");
+		final File nativeFile = new File("test1");
+		nativeArtifact.setFile(nativeFile);
+		artifacts.add(nativeArtifact);
+
+		Artifact nativeArtifact2 = artifactFactory.createArtifact("groupid2","artifactid2","2.0","compile","jar","natives-mac");
+		final File nativeFile2 = new File("test2");
+		nativeArtifact2.setFile(nativeFile2);
+		artifacts.add(nativeArtifact2);
+
+		Artifact nativeArtifact3 = artifactFactory.createArtifact("groupid2","artifactid2","2.0","compile","jar","natives-linux");
+		final File nativeFile3 = new File("test3");
+		nativeArtifact3.setFile(nativeFile3);
+		artifacts.add(nativeArtifact3);
+
+		artifacts.add(artifactFactory.createArtifact("groupid3","artifactid3","3.0"));
+		
+		context.checking(new Expectations()
+		{
+			{
+				oneOf(nativesTargetDir).mkdirs();
+				oneOf(mavenProject).getArtifacts();will(returnValue(artifacts));
+				oneOf(jarUnpacker).copyJarContent(nativeFile, nativesTargetDir);
+				oneOf(jarUnpacker).copyJarContent(nativeFile3, nativesTargetDir);
+			}
+		});
+		
+		mojo.execute();
+	}	
 }
Index: maven-nativedependencies-plugin/src/main/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojo.java
===================================================================
--- maven-nativedependencies-plugin/src/main/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojo.java	(revision 156)
+++ maven-nativedependencies-plugin/src/main/java/com/googlecode/mavennatives/nativedependencies/CopyNativesMojo.java	(working copy)
@@ -17,6 +17,7 @@
  */
 
 import java.io.File;
+import java.util.List;
 import java.util.Set;
 
 import org.apache.maven.artifact.Artifact;
@@ -56,6 +57,11 @@
 	private boolean separateDirs;
 
 	/**
+	 * @parameter expression="${platforms}"
+	 */
+	private List<String> platforms;
+
+	/**
 	 * @component
 	 */
 	private IJarUnpacker jarUnpacker;
@@ -70,17 +76,27 @@
 			getLog().info("Saving natives in " + nativesTargetDir);
 			if (separateDirs)
 				getLog().info("Storing artifacts in separate dirs according to classifier");
+			final boolean platformsActive = platforms != null && (!platforms.isEmpty());
+			if (platformsActive)
+				getLog().info(String.format("Only copying the following platforms: %s", platforms));
+			else
+				getLog().info("Copying all platforms.");
 			Set<Artifact> artifacts = project.getArtifacts();
 			nativesTargetDir.mkdirs();
+			getLog().debug(String.format("Using "));
 			for (Artifact artifact : artifacts) {
 				String classifier = artifact.getClassifier();
 				if (classifier != null && classifier.startsWith("natives-")) {
-
+					
+					String platform = classifier.substring("natives-".length());
+					if (platformsActive && (!platforms.contains(platform))) {
+						getLog().debug(String.format("Skipping other platform: G:%s - A:%s - C:%s", artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier()));
+						continue;
+					}
 					getLog().info(String.format("G:%s - A:%s - C:%s", artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier()));
 					File artifactDir = nativesTargetDir;
 					if (separateDirs) {
-						String suffix = classifier.substring("natives-".length());
-						artifactDir = new File(nativesTargetDir, suffix);
+						artifactDir = new File(nativesTargetDir, platform);
 						artifactDir.mkdirs();
 					}
 					jarUnpacker.copyJarContent(artifact.getFile(), artifactDir);
@@ -109,4 +125,11 @@
 		this.buildContext = buildContext;
 	}
 
+	public List<String> getPlatforms() {
+		return platforms;
+	}
+
+	public void setPlatforms(List<String> platforms) {
+		this.platforms = platforms;
+	}
 }
